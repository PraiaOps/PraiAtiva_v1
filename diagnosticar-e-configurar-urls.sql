-- ============================================================================
-- DIAGN√ìSTICO E CONFIGURA√á√ÉO DE URLs - SUPABASE
-- ============================================================================
-- Este script diagnostica problemas com redirecionamento de email
-- e tenta configurar as URLs corretas quando poss√≠vel
-- 
-- IMPORTANTE: Algumas configura√ß√µes s√≥ podem ser alteradas pelo Dashboard
-- ============================================================================

-- ============================================================================
-- PARTE 1: DIAGN√ìSTICO - Verificar configura√ß√µes atuais
-- ============================================================================

-- 1.1 Verificar configura√ß√µes de autentica√ß√£o (se acess√≠vel)
SELECT 
    'Configura√ß√µes Auth' as secao,
    key as configuracao,
    value as valor_atual
FROM auth.config
WHERE key IN ('SITE_URL', 'URI_ALLOW_LIST', 'REDIRECT_URL')
ORDER BY key;

-- 1.2 Verificar usu√°rios n√£o verificados
SELECT 
    'Usu√°rios N√£o Verificados' as secao,
    COUNT(*) as total_usuarios,
    STRING_AGG(email, ', ') as emails
FROM auth.users
WHERE email_confirmed_at IS NULL
GROUP BY 1;

-- 1.3 Verificar usu√°rios recentes (√∫ltimas 24 horas)
SELECT 
    'Usu√°rios Recentes' as secao,
    id,
    email,
    CASE 
        WHEN email_confirmed_at IS NOT NULL THEN 'Verificado'
        ELSE 'Aguardando verifica√ß√£o'
    END as status,
    created_at,
    email_confirmed_at,
    raw_user_meta_data->>'role' as role_cadastrada
FROM auth.users
WHERE created_at > NOW() - INTERVAL '24 hours'
ORDER BY created_at DESC;

-- 1.4 Verificar usu√°rios sem perfil criado (√≥rf√£os)
SELECT 
    'Usu√°rios √ìrf√£os (sem perfil)' as secao,
    au.id,
    au.email,
    au.email_confirmed_at,
    au.raw_user_meta_data->>'role' as role_metadata,
    CASE 
        WHEN u.id IS NULL THEN 'SEM PERFIL'
        ELSE 'COM PERFIL'
    END as status_perfil
FROM auth.users au
LEFT JOIN public.users u ON u.id = au.id
WHERE au.email_confirmed_at IS NOT NULL 
  AND u.id IS NULL
ORDER BY au.created_at DESC;

-- 1.5 Verificar todos os usu√°rios e seus perfis
SELECT 
    'Status Geral dos Usu√°rios' as secao,
    au.email,
    CASE 
        WHEN au.email_confirmed_at IS NOT NULL THEN '‚úÖ Verificado'
        ELSE '‚ùå N√£o verificado'
    END as email_status,
    CASE 
        WHEN u.id IS NOT NULL THEN '‚úÖ Perfil criado'
        ELSE '‚ùå Sem perfil'
    END as perfil_status,
    u.role as role_atual,
    au.raw_user_meta_data->>'role' as role_metadata,
    au.created_at as cadastrado_em
FROM auth.users au
LEFT JOIN public.users u ON u.id = au.id
ORDER BY au.created_at DESC
LIMIT 20;

-- ============================================================================
-- PARTE 2: CORRE√á√ÉO - Criar perfis para usu√°rios √≥rf√£os
-- ============================================================================

-- 2.1 Informa√ß√µes sobre usu√°rios √≥rf√£os que ser√£o corrigidos
SELECT 
    'üîß Usu√°rios que ter√£o perfil criado' as acao,
    au.id,
    au.email,
    au.raw_user_meta_data->>'full_name' as nome,
    au.raw_user_meta_data->>'role' as role,
    au.email_confirmed_at
FROM auth.users au
LEFT JOIN public.users u ON u.id = au.id
WHERE au.email_confirmed_at IS NOT NULL 
  AND u.id IS NULL;

-- 2.2 CRIAR PERFIS para usu√°rios verificados que n√£o t√™m perfil
-- Esta √© a corre√ß√£o principal para o problema
INSERT INTO public.users (
    id,
    email,
    name,
    role,
    show_name,
    created_at,
    updated_at
)
SELECT 
    au.id,
    au.email,
    COALESCE(
        au.raw_user_meta_data->>'full_name',
        SPLIT_PART(au.email, '@', 1)
    ) as name,
    COALESCE(
        au.raw_user_meta_data->>'role',
        'aluno'
    )::text as role,
    true as show_name,
    au.created_at,
    NOW() as updated_at
FROM auth.users au
LEFT JOIN public.users u ON u.id = au.id
WHERE au.email_confirmed_at IS NOT NULL  -- S√≥ usu√°rios verificados
  AND u.id IS NULL                        -- Que n√£o t√™m perfil
ON CONFLICT (id) DO NOTHING;              -- Ignorar se j√° existir

-- 2.3 Verificar perfis criados
SELECT 
    '‚úÖ Perfis criados com sucesso' as resultado,
    COUNT(*) as total_perfis_criados
FROM public.users u
INNER JOIN auth.users au ON au.id = u.id
WHERE u.created_at > NOW() - INTERVAL '1 minute';

-- ============================================================================
-- PARTE 3: CORRE√á√ÉO MANUAL - Para usu√°rios espec√≠ficos
-- ============================================================================

-- 3.1 Se voc√™ souber o email do usu√°rio com problema, execute isto:
-- SUBSTITUA 'email@exemplo.com' pelo email real do usu√°rio

-- Descomentar as linhas abaixo e substituir o email:
/*
DO $$
DECLARE
    v_user_email TEXT := 'email@exemplo.com'; -- SUBSTITUA AQUI
    v_user_id UUID;
    v_user_name TEXT;
    v_user_role TEXT;
BEGIN
    -- Buscar dados do usu√°rio
    SELECT 
        id,
        COALESCE(raw_user_meta_data->>'full_name', SPLIT_PART(email, '@', 1)),
        COALESCE(raw_user_meta_data->>'role', 'aluno')
    INTO v_user_id, v_user_name, v_user_role
    FROM auth.users
    WHERE email = v_user_email;
    
    IF v_user_id IS NOT NULL THEN
        -- Confirmar email se n√£o estiver confirmado
        UPDATE auth.users
        SET email_confirmed_at = NOW()
        WHERE id = v_user_id
          AND email_confirmed_at IS NULL;
        
        -- Criar perfil se n√£o existir
        INSERT INTO public.users (
            id, email, name, role, show_name, created_at, updated_at
        ) VALUES (
            v_user_id,
            v_user_email,
            v_user_name,
            v_user_role,
            true,
            NOW(),
            NOW()
        )
        ON CONFLICT (id) DO NOTHING;
        
        RAISE NOTICE '‚úÖ Usu√°rio % processado com sucesso!', v_user_email;
    ELSE
        RAISE NOTICE '‚ùå Usu√°rio % n√£o encontrado!', v_user_email;
    END IF;
END $$;
*/

-- ============================================================================
-- PARTE 4: VERIFICA√á√ÉO FINAL
-- ============================================================================

-- 4.1 Status final de todos os usu√°rios
SELECT 
    'üìä RESUMO FINAL' as titulo,
    COUNT(*) FILTER (WHERE au.email_confirmed_at IS NOT NULL) as emails_verificados,
    COUNT(*) FILTER (WHERE au.email_confirmed_at IS NULL) as emails_pendentes,
    COUNT(*) FILTER (WHERE u.id IS NOT NULL) as perfis_criados,
    COUNT(*) FILTER (WHERE au.email_confirmed_at IS NOT NULL AND u.id IS NULL) as usuarios_orfaos,
    COUNT(*) as total_usuarios
FROM auth.users au
LEFT JOIN public.users u ON u.id = au.id;

-- 4.2 Listar usu√°rios problem√°ticos que ainda precisam de aten√ß√£o
SELECT 
    '‚ö†Ô∏è Usu√°rios que ainda precisam de aten√ß√£o' as alerta,
    au.email,
    CASE 
        WHEN au.email_confirmed_at IS NULL THEN '‚ùå Email n√£o verificado'
        WHEN u.id IS NULL THEN '‚ùå Perfil n√£o criado'
        ELSE '‚úÖ OK'
    END as problema,
    au.created_at
FROM auth.users au
LEFT JOIN public.users u ON u.id = au.id
WHERE au.email_confirmed_at IS NULL 
   OR (au.email_confirmed_at IS NOT NULL AND u.id IS NULL)
ORDER BY au.created_at DESC;

-- ============================================================================
-- PARTE 5: INFORMA√á√ïES IMPORTANTES
-- ============================================================================

SELECT 
    'üìù INFORMA√á√ïES IMPORTANTES' as secao,
    '
    ‚ö†Ô∏è CONFIGURA√á√ïES QUE PRECISAM SER FEITAS NO DASHBOARD:
    
    1. Site URL e Redirect URLs N√ÉO PODEM ser alteradas via SQL
    2. Voc√™ DEVE configurar no Supabase Dashboard:
       - Authentication > URL Configuration
       - Site URL: seu dom√≠nio de produ√ß√£o
       - Redirect URLs: adicionar todas as URLs com /**
    
    ‚úÖ O que este script FAZ:
    - Diagnostica usu√°rios sem perfil
    - Cria perfis automaticamente para usu√°rios verificados
    - Confirma emails manualmente se necess√°rio
    
    ‚ùå O que este script N√ÉO PODE FAZER:
    - Alterar Site URL (precisa do Dashboard)
    - Alterar Redirect URLs (precisa do Dashboard)
    - Reenviar emails de confirma√ß√£o
    
    üìã PR√ìXIMOS PASSOS:
    1. Execute este script para criar perfis pendentes
    2. Configure as URLs no Dashboard (veja PASSO-A-PASSO-CONFIGURAR-SUPABASE.md)
    3. Fa√ßa um NOVO cadastro para testar
    4. O c√≥digo j√° est√° configurado com emailRedirectTo correto
    ' as instrucoes;

-- ============================================================================
-- FIM DO SCRIPT
-- ============================================================================

-- Mensagem final
SELECT 
    '‚úÖ SCRIPT EXECUTADO COM SUCESSO!' as resultado,
    'Verifique os resultados acima' as proximo_passo,
    NOW() as executado_em;

